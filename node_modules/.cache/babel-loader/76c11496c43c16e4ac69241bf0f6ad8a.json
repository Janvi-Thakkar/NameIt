{"ast":null,"code":"'use strict';\n/* Dependencies. */\n\nvar has = require('has');\n\nvar pluralize = require('pluralize');\n\nvar normalize = require('normalize-strings');\n\nvar problematic = require('./problematic');\n/* Expose. */\n\n\nmodule.exports = syllables;\n/* Two expressions of occurrences which normally would\n * be counted as two syllables, but should be counted\n * as one. */\n\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp('cia(l|$)|' + 'tia|' + 'cius|' + 'cious|' + '[^aeiou]giu|' + '[aeiouy][^aeiouy]ion|' + 'iou|' + 'sia$|' + 'eous$|' + '[oa]gue$|' + '.[^aeiuoycgltdb]{2,}ed$|' + '.ely$|' + '^jua|' + 'uai|' + 'eau|' + '^busi$|' + '(' + '[aeiouy]' + '(' + 'b|' + 'c|' + 'ch|' + 'dg|' + 'f|' + 'g|' + 'gh|' + 'gn|' + 'k|' + 'l|' + 'lch|' + 'll|' + 'lv|' + 'm|' + 'mm|' + 'n|' + 'nc|' + 'ng|' + 'nch|' + 'nn|' + 'p|' + 'r|' + 'rc|' + 'rn|' + 'rs|' + 'rv|' + 's|' + 'sc|' + 'sk|' + 'sl|' + 'squ|' + 'ss|' + 'th|' + 'v|' + 'y|' + 'z' + ')' + 'ed$' + ')|' + '(' + '[aeiouy]' + '(' + 'b|' + 'ch|' + 'd|' + 'f|' + 'gh|' + 'gn|' + 'k|' + 'l|' + 'lch|' + 'll|' + 'lv|' + 'm|' + 'mm|' + 'n|' + 'nch|' + 'nn|' + 'p|' + 'r|' + 'rn|' + 'rs|' + 'rv|' + 's|' + 'sc|' + 'sk|' + 'sl|' + 'squ|' + 'ss|' + 'st|' + 't|' + 'th|' + 'v|' + 'y' + ')' + 'es$' + ')', 'g');\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp('[aeiouy]' + '(' + 'b|' + 'c|' + 'ch|' + 'd|' + 'dg|' + 'f|' + 'g|' + 'gh|' + 'gn|' + 'k|' + 'l|' + 'll|' + 'lv|' + 'm|' + 'mm|' + 'n|' + 'nc|' + 'ng|' + 'nn|' + 'p|' + 'r|' + 'rc|' + 'rn|' + 'rs|' + 'rv|' + 's|' + 'sc|' + 'sk|' + 'sl|' + 'squ|' + 'ss|' + 'st|' + 't|' + 'th|' + 'v|' + 'y|' + 'z' + ')' + 'e$', 'g');\n/* Four expression of occurrences which normally would be\n * counted as one syllable, but should be counted as two. */\n\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp('(' + '(' + '[^aeiouy]' + ')\\\\2l|' + '[^aeiouy]ie' + '(' + 'r|' + 'st|' + 't' + ')|' + '[aeiouym]bl|' + 'eo|' + 'ism|' + 'asm|' + 'thm|' + 'dnt|' + 'uity|' + 'dea|' + 'gean|' + 'oa|' + 'ua|' + 'eings?|' + '[aeiouy]sh?e[rsd]' + ')$', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp('[^gq]ua[^auieo]|' + '[aeiou]{3}|' + '^(' + 'ia|' + 'mc|' + 'coa[dglx].' + ')', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp('[^aeiou]y[ae]|' + '[^l]lien|' + 'riet|' + 'dien|' + 'iu|' + 'io|' + 'ii|' + 'uen|' + 'real|' + 'iell|' + 'eo[^aeiou]|' + '[aeiou]y[aeiou]', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;\n/* Expression to match single syllable pre- and suffixes. */\n\nvar EXPRESSION_SINGLE = new RegExp('^' + '(' + 'un|' + 'fore|' + 'ware|' + 'none?|' + 'out|' + 'post|' + 'sub|' + 'pre|' + 'pro|' + 'dis|' + 'side' + ')' + '|' + '(' + 'ly|' + 'less|' + 'some|' + 'ful|' + 'ers?|' + 'ness|' + 'cians?|' + 'ments?|' + 'ettes?|' + 'villes?|' + 'ships?|' + 'sides?|' + 'ports?|' + 'shires?|' + 'tion(ed)?' + ')' + '$', 'g');\n/* Expression to match double syllable pre- and suffixes. */\n\nvar EXPRESSION_DOUBLE = new RegExp('^' + '(' + 'above|' + 'anti|' + 'ante|' + 'counter|' + 'hyper|' + 'afore|' + 'agri|' + 'infra|' + 'intra|' + 'inter|' + 'over|' + 'semi|' + 'ultra|' + 'under|' + 'extra|' + 'dia|' + 'micro|' + 'mega|' + 'kilo|' + 'pico|' + 'nano|' + 'macro' + ')' + '|' + '(' + 'fully|' + 'berry|' + 'woman|' + 'women' + ')' + '$', 'g');\n/* Expression to match triple syllable suffixes. */\n\nvar EXPRESSION_TRIPLE = /(ology|ologist|onomy|onomist)$/g;\n/* Expression to split on word boundaries. */\n\nvar SPLIT = /\\b/g;\n/* Expression to remove non-alphabetic characters from\n * a given value. */\n\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g;\n/* Wrapper to support multiple word-parts (GH-11). */\n\nfunction syllables(value) {\n  var values = normalize(String(value)).toLowerCase().split(SPLIT);\n  var length = values.length;\n  var index = -1;\n  var total = 0;\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''));\n  }\n\n  return total;\n}\n/* Get syllables in a given value. */\n\n\nfunction syllable(value) {\n  var count = 0;\n  var index;\n  var length;\n  var singular;\n  var parts;\n  var addOne;\n  var subtractOne;\n\n  if (!value.length) {\n    return count;\n  }\n  /* Return early when possible. */\n\n\n  if (value.length < 3) {\n    return 1;\n  }\n  /* If `value` is a hard to count, it might be\n   * in `problematic`. */\n\n\n  if (has(problematic, value)) {\n    return problematic[value];\n  }\n  /* Additionally, the singular word might be\n   * in `problematic`. */\n\n\n  singular = pluralize(value, 1);\n\n  if (has(problematic, singular)) {\n    return problematic[singular];\n  }\n\n  addOne = returnFactory(1);\n  subtractOne = returnFactory(-1);\n  /* Count some prefixes and suffixes, and remove\n   * their matched ranges. */\n\n  value = value.replace(EXPRESSION_TRIPLE, countFactory(3)).replace(EXPRESSION_DOUBLE, countFactory(2)).replace(EXPRESSION_SINGLE, countFactory(1));\n  /* Count multiple consonants. */\n\n  parts = value.split(/[^aeiouy]+/);\n  index = -1;\n  length = parts.length;\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  }\n  /* Subtract one for occurrences which should be\n   * counted as one (but are counted as two). */\n\n\n  value.replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne).replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);\n  /* Add one for occurrences which should be counted\n   * as two (but are counted as one). */\n\n  value.replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);\n  /* Make sure at least on is returned. */\n\n  return count || 1;\n  /* Define scoped counters, to be used\n   * in `String#replace()` calls.\n   * The scoped counter removes the matched value\n   * from the input. */\n\n  function countFactory(addition) {\n    return counter;\n\n    function counter() {\n      count += addition;\n      return '';\n    }\n  }\n  /* Define scoped counters, to be used\n   * in `String#replace()` calls.\n   * The scoped counter does not remove the matched\n   * value from the input. */\n\n\n  function returnFactory(addition) {\n    return returner;\n\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/hp1/node/name-it/node_modules/syllable/index.js"],"names":["has","require","pluralize","normalize","problematic","module","exports","syllables","EXPRESSION_MONOSYLLABIC_ONE","RegExp","EXPRESSION_MONOSYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_ONE","EXPRESSION_DOUBLE_SYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_THREE","EXPRESSION_DOUBLE_SYLLABIC_FOUR","EXPRESSION_SINGLE","EXPRESSION_DOUBLE","EXPRESSION_TRIPLE","SPLIT","EXPRESSION_NONALPHABETIC","value","values","String","toLowerCase","split","length","index","total","syllable","replace","count","singular","parts","addOne","subtractOne","returnFactory","countFactory","addition","counter","returner","$0"],"mappings":"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","sourcesContent":["'use strict';\n\n/* Dependencies. */\nvar has = require('has');\nvar pluralize = require('pluralize');\nvar normalize = require('normalize-strings');\nvar problematic = require('./problematic');\n\n/* Expose. */\nmodule.exports = syllables;\n\n/* Two expressions of occurrences which normally would\n * be counted as two syllables, but should be counted\n * as one. */\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  'cia(l|$)|' +\n  'tia|' +\n  'cius|' +\n  'cious|' +\n  '[^aeiou]giu|' +\n  '[aeiouy][^aeiouy]ion|' +\n  'iou|' +\n  'sia$|' +\n  'eous$|' +\n  '[oa]gue$|' +\n  '.[^aeiuoycgltdb]{2,}ed$|' +\n  '.ely$|' +\n  '^jua|' +\n  'uai|' +\n  'eau|' +\n  '^busi$|' +\n  '(' +\n    '[aeiouy]' +\n    '(' +\n      'b|' +\n      'c|' +\n      'ch|' +\n      'dg|' +\n      'f|' +\n      'g|' +\n      'gh|' +\n      'gn|' +\n      'k|' +\n      'l|' +\n      'lch|' +\n      'll|' +\n      'lv|' +\n      'm|' +\n      'mm|' +\n      'n|' +\n      'nc|' +\n      'ng|' +\n      'nch|' +\n      'nn|' +\n      'p|' +\n      'r|' +\n      'rc|' +\n      'rn|' +\n      'rs|' +\n      'rv|' +\n      's|' +\n      'sc|' +\n      'sk|' +\n      'sl|' +\n      'squ|' +\n      'ss|' +\n      'th|' +\n      'v|' +\n      'y|' +\n      'z' +\n    ')' +\n    'ed$' +\n  ')|' +\n  '(' +\n    '[aeiouy]' +\n    '(' +\n      'b|' +\n      'ch|' +\n      'd|' +\n      'f|' +\n      'gh|' +\n      'gn|' +\n      'k|' +\n      'l|' +\n      'lch|' +\n      'll|' +\n      'lv|' +\n      'm|' +\n      'mm|' +\n      'n|' +\n      'nch|' +\n      'nn|' +\n      'p|' +\n      'r|' +\n      'rn|' +\n      'rs|' +\n      'rv|' +\n      's|' +\n      'sc|' +\n      'sk|' +\n      'sl|' +\n      'squ|' +\n      'ss|' +\n      'st|' +\n      't|' +\n      'th|' +\n      'v|' +\n      'y' +\n    ')' +\n    'es$' +\n  ')',\n  'g'\n);\n\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy]' +\n  '(' +\n    'b|' +\n    'c|' +\n    'ch|' +\n    'd|' +\n    'dg|' +\n    'f|' +\n    'g|' +\n    'gh|' +\n    'gn|' +\n    'k|' +\n    'l|' +\n    'll|' +\n    'lv|' +\n    'm|' +\n    'mm|' +\n    'n|' +\n    'nc|' +\n    'ng|' +\n    'nn|' +\n    'p|' +\n    'r|' +\n    'rc|' +\n    'rn|' +\n    'rs|' +\n    'rv|' +\n    's|' +\n    'sc|' +\n    'sk|' +\n    'sl|' +\n    'squ|' +\n    'ss|' +\n    'st|' +\n    't|' +\n    'th|' +\n    'v|' +\n    'y|' +\n    'z' +\n  ')' +\n  'e$',\n  'g'\n);\n\n/* Four expression of occurrences which normally would be\n * counted as one syllable, but should be counted as two. */\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(' +\n    '(' +\n      '[^aeiouy]' +\n    ')\\\\2l|' +\n    '[^aeiouy]ie' +\n    '(' +\n      'r|' +\n      'st|' +\n      't' +\n    ')|' +\n    '[aeiouym]bl|' +\n    'eo|' +\n    'ism|' +\n    'asm|' +\n    'thm|' +\n    'dnt|' +\n    'uity|' +\n    'dea|' +\n    'gean|' +\n    'oa|' +\n    'ua|' +\n    'eings?|' +\n    '[aeiouy]sh?e[rsd]' +\n  ')$',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  '[^gq]ua[^auieo]|' +\n  '[aeiou]{3}|' +\n  '^(' +\n    'ia|' +\n    'mc|' +\n    'coa[dglx].' +\n  ')',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  '[^aeiou]y[ae]|' +\n  '[^l]lien|' +\n  'riet|' +\n  'dien|' +\n  'iu|' +\n  'io|' +\n  'ii|' +\n  'uen|' +\n  'real|' +\n  'iell|' +\n  'eo[^aeiou]|' +\n  '[aeiou]y[aeiou]',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;\n\n/* Expression to match single syllable pre- and suffixes. */\nvar EXPRESSION_SINGLE = new RegExp(\n  '^' +\n  '(' +\n    'un|' +\n    'fore|' +\n    'ware|' +\n    'none?|' +\n    'out|' +\n    'post|' +\n    'sub|' +\n    'pre|' +\n    'pro|' +\n    'dis|' +\n    'side' +\n  ')' +\n  '|' +\n  '(' +\n    'ly|' +\n    'less|' +\n    'some|' +\n    'ful|' +\n    'ers?|' +\n    'ness|' +\n    'cians?|' +\n    'ments?|' +\n    'ettes?|' +\n    'villes?|' +\n    'ships?|' +\n    'sides?|' +\n    'ports?|' +\n    'shires?|' +\n    'tion(ed)?' +\n  ')' +\n  '$',\n  'g'\n);\n\n/* Expression to match double syllable pre- and suffixes. */\nvar EXPRESSION_DOUBLE = new RegExp(\n  '^' +\n  '(' +\n    'above|' +\n    'anti|' +\n    'ante|' +\n    'counter|' +\n    'hyper|' +\n    'afore|' +\n    'agri|' +\n    'infra|' +\n    'intra|' +\n    'inter|' +\n    'over|' +\n    'semi|' +\n    'ultra|' +\n    'under|' +\n    'extra|' +\n    'dia|' +\n    'micro|' +\n    'mega|' +\n    'kilo|' +\n    'pico|' +\n    'nano|' +\n    'macro' +\n  ')' +\n  '|' +\n  '(' +\n    'fully|' +\n    'berry|' +\n    'woman|' +\n    'women' +\n  ')' +\n  '$',\n  'g'\n);\n\n/* Expression to match triple syllable suffixes. */\nvar EXPRESSION_TRIPLE = /(ology|ologist|onomy|onomist)$/g;\n\n/* Expression to split on word boundaries. */\nvar SPLIT = /\\b/g;\n\n/* Expression to remove non-alphabetic characters from\n * a given value. */\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g;\n\n/* Wrapper to support multiple word-parts (GH-11). */\nfunction syllables(value) {\n  var values = normalize(String(value)).toLowerCase().split(SPLIT);\n  var length = values.length;\n  var index = -1;\n  var total = 0;\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''));\n  }\n\n  return total;\n}\n\n/* Get syllables in a given value. */\nfunction syllable(value) {\n  var count = 0;\n  var index;\n  var length;\n  var singular;\n  var parts;\n  var addOne;\n  var subtractOne;\n\n  if (!value.length) {\n    return count;\n  }\n\n  /* Return early when possible. */\n  if (value.length < 3) {\n    return 1;\n  }\n\n  /* If `value` is a hard to count, it might be\n   * in `problematic`. */\n  if (has(problematic, value)) {\n    return problematic[value];\n  }\n\n  /* Additionally, the singular word might be\n   * in `problematic`. */\n  singular = pluralize(value, 1);\n\n  if (has(problematic, singular)) {\n    return problematic[singular];\n  }\n\n  addOne = returnFactory(1);\n  subtractOne = returnFactory(-1);\n\n  /* Count some prefixes and suffixes, and remove\n   * their matched ranges. */\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1));\n\n  /* Count multiple consonants. */\n  parts = value.split(/[^aeiouy]+/);\n  index = -1;\n  length = parts.length;\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  }\n\n  /* Subtract one for occurrences which should be\n   * counted as one (but are counted as two). */\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);\n\n  /* Add one for occurrences which should be counted\n   * as two (but are counted as one). */\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);\n\n  /* Make sure at least on is returned. */\n  return count || 1;\n\n /* Define scoped counters, to be used\n  * in `String#replace()` calls.\n  * The scoped counter removes the matched value\n  * from the input. */\n  function countFactory(addition) {\n    return counter;\n    function counter() {\n      count += addition;\n      return '';\n    }\n  }\n\n /* Define scoped counters, to be used\n  * in `String#replace()` calls.\n  * The scoped counter does not remove the matched\n  * value from the input. */\n  function returnFactory(addition) {\n    return returner;\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}