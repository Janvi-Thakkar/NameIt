{"ast":null,"code":"// TODO:\n// suffix input, eg, -ploy\n// Try these:\n// - place site point spot local\n// - trade stock\n// - health fit\nvar sortBy = require('lodash/sortBy');\n\nvar getRandom = require('random-seed');\n\nvar permutate = require('./permutate').permutate;\n\nvar score = require('./score').score;\n\nvar normalize = require('./normalize').normalize;\n/**\n * Names your shitty startup. Returns a list of possible names.\n * @example\n *\n *     namer('cloud')\n *     namer('health fit')\n *     namer(['health', 'fit'])\n *     => ['Fitrise', 'Fityard', 'Healthup', ...]\n */\n\n\nfunction namer(words) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof words === 'string') words = words.split(' ');\n  var list = permutate(words); // Random number generator\n\n  var gen = getRandom(options.seed || Math.random());\n\n  var rand = function rand() {\n    return gen.floatBetween(0, 1);\n  };\n\n  list = list.map(function (word) {\n    return {\n      word: normalize(word),\n      score: score(word, {\n        rand: rand\n      })\n    };\n  }); // Sort by score\n\n  list = sortBy(list, function (_ref) {\n    var word = _ref.word,\n        score = _ref.score;\n    return -1 * score;\n  }); // Reduce to just words\n\n  list = list.map(function (_ref2) {\n    var word = _ref2.word,\n        score = _ref2.score;\n    return word;\n  });\n  return list;\n}\n/*\n * Export\n */\n\n\nmodule.exports = namer;","map":{"version":3,"sources":["C:/Users/hp1/node/NameIt/node_modules/@rstacruz/startup-name-generator/lib/index.js"],"names":["sortBy","require","getRandom","permutate","score","normalize","namer","words","options","split","list","gen","seed","Math","random","rand","floatBetween","map","word","module","exports"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,SAAzC;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAP,CAAmBG,KAAjC;;AACA,IAAMC,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAP,CAAuBI,SAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,KAAT,CAAgBC,KAAhB,EAAqC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACnC,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+BA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAR;AAE/B,MAAIC,IAAI,GAAGP,SAAS,CAACI,KAAD,CAApB,CAHmC,CAKnC;;AACA,MAAII,GAAG,GAAGT,SAAS,CAACM,OAAO,CAACI,IAAR,IAAgBC,IAAI,CAACC,MAAL,EAAjB,CAAnB;;AACA,MAAIC,IAAI,GAAG,SAAPA,IAAO;AAAA,WAAMJ,GAAG,CAACK,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,CAAN;AAAA,GAAX;;AAEAN,EAAAA,IAAI,GAAGA,IAAI,CAACO,GAAL,CAAS,UAACC,IAAD;AAAA,WAAW;AACzBA,MAAAA,IAAI,EAAEb,SAAS,CAACa,IAAD,CADU;AAEzBd,MAAAA,KAAK,EAAEA,KAAK,CAACc,IAAD,EAAO;AAAEH,QAAAA,IAAI,EAAJA;AAAF,OAAP;AAFa,KAAX;AAAA,GAAT,CAAP,CATmC,CAcnC;;AACAL,EAAAA,IAAI,GAAGV,MAAM,CAACU,IAAD,EAAO;AAAA,QAAGQ,IAAH,QAAGA,IAAH;AAAA,QAASd,KAAT,QAASA,KAAT;AAAA,WAAqB,CAAC,CAAD,GAAKA,KAA1B;AAAA,GAAP,CAAb,CAfmC,CAiBnC;;AACAM,EAAAA,IAAI,GAAGA,IAAI,CAACO,GAAL,CAAS;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,QAASd,KAAT,SAASA,KAAT;AAAA,WAAqBc,IAArB;AAAA,GAAT,CAAP;AAEA,SAAOR,IAAP;AACD;AAED;AACA;AACA;;;AAEAS,MAAM,CAACC,OAAP,GAAiBd,KAAjB","sourcesContent":["// TODO:\n// suffix input, eg, -ploy\n\n// Try these:\n// - place site point spot local\n// - trade stock\n// - health fit\n\nconst sortBy = require('lodash/sortBy')\nconst getRandom = require('random-seed')\nconst permutate = require('./permutate').permutate\nconst score = require('./score').score\nconst normalize = require('./normalize').normalize\n\n/**\n * Names your shitty startup. Returns a list of possible names.\n * @example\n *\n *     namer('cloud')\n *     namer('health fit')\n *     namer(['health', 'fit'])\n *     => ['Fitrise', 'Fityard', 'Healthup', ...]\n */\n\nfunction namer (words, options = {}) {\n  if (typeof words === 'string') words = words.split(' ')\n\n  let list = permutate(words)\n\n  // Random number generator\n  let gen = getRandom(options.seed || Math.random())\n  let rand = () => gen.floatBetween(0, 1)\n\n  list = list.map((word) => ({\n    word: normalize(word),\n    score: score(word, { rand })\n  }))\n\n  // Sort by score\n  list = sortBy(list, ({ word, score }) => -1 * score)\n\n  // Reduce to just words\n  list = list.map(({ word, score }) => word)\n\n  return list\n}\n\n/*\n * Export\n */\n\nmodule.exports = namer\n"]},"metadata":{},"sourceType":"script"}