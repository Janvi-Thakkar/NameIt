{"ast":null,"code":"var _require = require('./constants'),\n    PREFIXES = _require.PREFIXES,\n    SUFFIXES = _require.SUFFIXES;\n/*\n * Adds suffixes and prefixes to words\n */\n\n\nfunction permutate(words) {\n  if (words.length === 0) {\n    return permutateFixes(PREFIXES, SUFFIXES);\n  } else {\n    return permutateFixes(PREFIXES, words).concat(permutateFixes(words, SUFFIXES));\n  }\n}\n/*\n * I'm feeling lucky\n */\n\n\nfunction permutateFixes(prefixes, suffixes) {\n  return prefixes.reduce(function (list, prefix) {\n    return suffixes.reduce(function (list, suffix) {\n      if (prefix === suffix) return list;\n      return list.concat([\"\".concat(prefix, \" \").concat(suffix)]);\n    }, list);\n  }, []);\n}\n\nmodule.exports = {\n  permutate: permutate,\n  permutateFixes: permutateFixes\n};","map":{"version":3,"sources":["C:/Users/hp1/node/NameIt/node_modules/@rstacruz/startup-name-generator/lib/permutate.js"],"names":["require","PREFIXES","SUFFIXES","permutate","words","length","permutateFixes","concat","prefixes","suffixes","reduce","list","prefix","suffix","module","exports"],"mappings":"eAA+BA,OAAO,CAAC,aAAD,C;IAA9BC,Q,YAAAA,Q;IAAUC,Q,YAAAA,Q;AAElB;AACA;AACA;;;AAEA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOC,cAAc,CAACL,QAAD,EAAWC,QAAX,CAArB;AACD,GAFD,MAEO;AACL,WAAOI,cAAc,CAACL,QAAD,EAAWG,KAAX,CAAd,CACJG,MADI,CACGD,cAAc,CAACF,KAAD,EAAQF,QAAR,CADjB,CAAP;AAED;AACF;AAED;AACA;AACA;;;AAEA,SAASI,cAAT,CAAyBE,QAAzB,EAAmCC,QAAnC,EAA6C;AAC3C,SAAOD,QAAQ,CAACE,MAAT,CAAgB,UAACC,IAAD,EAAOC,MAAP,EAAkB;AACvC,WAAOH,QAAQ,CAACC,MAAT,CAAgB,UAACC,IAAD,EAAOE,MAAP,EAAkB;AACvC,UAAID,MAAM,KAAKC,MAAf,EAAuB,OAAOF,IAAP;AACvB,aAAOA,IAAI,CAACJ,MAAL,CAAY,WAAKK,MAAL,cAAeC,MAAf,EAAZ,CAAP;AACD,KAHM,EAGJF,IAHI,CAAP;AAID,GALM,EAKJ,EALI,CAAP;AAMD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AAAEZ,EAAAA,SAAS,EAATA,SAAF;AAAaG,EAAAA,cAAc,EAAdA;AAAb,CAAjB","sourcesContent":["const { PREFIXES, SUFFIXES } = require('./constants')\n\n/*\n * Adds suffixes and prefixes to words\n */\n\nfunction permutate (words) {\n  if (words.length === 0) {\n    return permutateFixes(PREFIXES, SUFFIXES)\n  } else {\n    return permutateFixes(PREFIXES, words)\n      .concat(permutateFixes(words, SUFFIXES))\n  }\n}\n\n/*\n * I'm feeling lucky\n */\n\nfunction permutateFixes (prefixes, suffixes) {\n  return prefixes.reduce((list, prefix) => {\n    return suffixes.reduce((list, suffix) => {\n      if (prefix === suffix) return list\n      return list.concat([ `${prefix} ${suffix}` ])\n    }, list)\n  }, [])\n}\n\nmodule.exports = { permutate, permutateFixes }\n"]},"metadata":{},"sourceType":"script"}